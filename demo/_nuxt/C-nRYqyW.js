import{I as p}from"./DbBM7WX3.js";import{aI as v,v as n,x as o,y as c,P as f,A as l,z as g,B as b,_ as y,X as h,T as x,a3 as _,Q as w}from"#entry";const S={class:"debug--wrapper text-fg dark:text-bg flex flex-col rounded-sm border border-danger-500 p-2 overflow-auto"},k={class:"debug--header flex justify-between"},C={class:"debug--title font-bold"},$={key:1},D={name:"LibDebug"},N=Object.assign(D,{props:{value:{type:null,required:!1,default:void 0},tab:{type:Number,required:!1,default:3},title:{type:String,required:!1,default:"Debug"}},setup(a){const r=v(),i=a,d=e=>e===void 0?"undefined":typeof e=="string"?e:JSON.stringify(e,null,"	"),u=e=>{let t="";for(const s of e)s.children?typeof s.children=="string"?t+=s.children:t+=u(s.children):t+=`
`;return t},m=()=>{if(navigator.clipboard){const e=i.value?d(i.value):r.default?.()?.[0]?.children?u([...r.default()[0].children]):void 0;if(e===void 0){console.warn("Cannot copy text, can't generate string value from `getStringValue` or `the default slot`.");return}navigator.clipboard.writeText(e).catch(()=>{})}};return(e,t)=>(o(),n("div",S,[c("div",k,[c("span",C,g(a.title),1),l(y,{class:"debug--copy-button w-min-content",onClick:t[0]||(t[0]=s=>m())},{default:b(()=>[l(_,null,{default:b(()=>[l(w(p))]),_:1})]),_:1})]),a.value?(o(),n("pre",{key:0,class:h(`
			debug--value
			[tab-size:${a.tab}]
		`)},g(d(a.value)),3)):f("",!0),a.value===void 0?(o(),n("pre",$,[x(e.$slots,"default")])):f("",!0)]))}}),j=Object.assign(N,{__name:"WDebug"});export{j as default};
